<ts:token xmlns:asnx="urn:ietf:params:xml:ns:asnx" xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2020/06/tokenscript" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" custodian="false" xsi:schemaLocation="http://tokenscript.org/2020/06/tokenscript http://tokenscript.org/2020/06/tokenscript.xsd">
    <asnx:module name="BotlDao-event-Sent">
        <namedType name="Sent">
            <type>
                <sequence>
                    <element name="from" ethereum:indexed="false" ethereum:type="address"></element>
                    <element name="to" ethereum:indexed="false" ethereum:type="address"></element>
                    <element name="amount" ethereum:indexed="false" ethereum:type="uint256"></element>
                </sequence>
            </type>
        </namedType>
    </asnx:module>
    <ts:label>
        <ts:string xml:lang="en">BotlDao</ts:string>
    </ts:label>
    <ts:contract interface="erc20" name="BotlDao">
        <ts:address network="43113">0xecd184349A3400DAbb6083Fa101Ae8f9277e81dd</ts:address>
        <!--mainnet-->
    </ts:contract>
    <ts:origins>
        <!-- Define the contract which holds the token that the user will use -->
        <ts:ethereum contract="BotlDao"></ts:ethereum>
        <!-- as above ts:contract name -->
    </ts:origins>
    <ts:cards>
        <ts:card name="About" type="action">
            <ts:label>
                <ts:string xml:lang="en">About</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
        this.setConfirm();
    }

    setConfirm() {
        window.onConfirm = function() {
            window.close();
        }
    }

    render() {
        let message = "Here the token info";
        const name = this.props.name;
        const symbol = this.props.symbol;
        const decimals = this.props.decimals;
        if(name == null) {
            message = "No info found for this token";
            window.onConfirm = function() { window.close() };
        } else {
            message = "name: " + name + " " + "symbol: " + symbol + " " + "decimals: " + decimals;
        }
        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Welcome to the DAO-erc20 token&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;
            &lt;span&gt;&lt;bold&gt;&lt;h3&gt;${message}&lt;/h3&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

          <ts:card name="Mint" type="action">
            <ts:label>
                <ts:string xml:lang="en">Mint</ts:string>
            </ts:label>

            <ts:attribute name="receiverAddress">
                <ts:type>
                    <ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax>
                </ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Receiver Address</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="address"></ts:user-entry>
                </ts:origins>
            </ts:attribute>

             <ts:attribute name="mintAmount">
            <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
            <ts:label>
                <ts:string xml:lang="en">Amount to mint</ts:string>
            </ts:label>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"></ts:user-entry>
            </ts:origins>
            </ts:attribute>
             
            <ts:transaction>
            <ethereum:transaction as="uint" contract="BotlDao" function="mint">
                    <!--<ethereum:to ref="receiverAddress"/>
                    <ethereum:value ref="mintAmount"/>-->
                <ts:data>
                    <ts:address ref="receiverAddress"></ts:address>
                    <ts:uint256 ref="mintAmount"></ts:uint256>
                </ts:data>
             </ethereum:transaction>
             </ts:transaction>

            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
        // this.setConfirm();
    }

    // setConfirm() {
    //     window.onConfirm = function() {
    //         window.close();
    //     }
    // }

    render() {

        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Let's mint some token!&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
          &lt;div id="inputBox"&gt;
              &lt;bold&gt;&lt;h3&gt;Please enter the receiver address&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="receiverAddress" type="text" placeholder="receiver address..."&gt;&lt;/span&gt;
    
              &lt;bold&gt;&lt;h3&gt;Please provide the amount to Mint&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="mintAmount" type="number" placeholder="amount to mint..."&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

        <ts:card name="Proposals" type="action">
            <ts:label>
                <ts:string xml:lang="en">Proposals</ts:string>
            </ts:label>

            <!-- <ts:attribute name="proposalId">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Proposal id</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"/>
                </ts:origins>

                <ethereum:call function="proposals" contract="BotlDao" as="uint">
                    <ts:data>
                        <ts:uint256 ref="proposalId"/>
                    </ts:data>
                </ethereum:call>

            </ts:attribute> -->
            <ts:attribute name="proposalId">
                <ts:type>
                    <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
                </ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Proposal id</ts:string>
                </ts:label>
                <ts:origins>
                    <ethereum:call as="uint" contract="BotlDao" function="proposals">
                    <ts:data>
                        <ts:uint256 ref="proposalId"></ts:uint256>
                    </ts:data>
                    </ethereum:call>
                </ts:origins>
            </ts:attribute>

            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
        // this.setConfirm();
    }

    // setConfirm() {
    //     window.onConfirm = function() {
    //         window.close();
    //     }
    // }

    render() {
        let message = "Here will be the proposal details";

        const proposals = this.props.proposals;
        if(proposals == undefined) {
            message = "No proposal found for this id";
            // window.onConfirm = function() { window.close() };
        } else {
            message = proposals;
        }
        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Show proposal&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
          &lt;div id="inputBox"&gt;    
              &lt;bold&gt;&lt;h3&gt;Please enter the proposal id&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="proposalId" type="number" placeholder="proposal id..."&gt;&lt;/span&gt;
              &lt;span&gt;&lt;bold&gt;&lt;h3&gt;${message}&lt;/h3&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt; 
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

        <ts:card name="Deposit" type="action">
            <ts:label>
                <ts:string xml:lang="en">Deposit</ts:string>
            </ts:label>

             <ts:attribute name="amountToDeposit">
            <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
            <ts:label>
                <ts:string xml:lang="en">Amount to deposit</ts:string>
            </ts:label>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"></ts:user-entry>
            </ts:origins>
            </ts:attribute>
             
            <ts:transaction>
            <ethereum:transaction as="uint" contract="BotlDao" function="deposit">
                <ts:data>
                    <ts:uint256 ref="amountToDeposit"></ts:uint256>
                </ts:data>
             </ethereum:transaction>
             </ts:transaction>

            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
    }

    render() {

        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Deposit token&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
          &lt;div id="inputBox"&gt;    
              &lt;bold&gt;&lt;h3&gt;Please enter the amount to Deposit&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="amountToDeposit" type="number" placeholder="amount to deposit..."&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

        <ts:card name="createProjectProposal" type="action">
            <ts:label>
                <ts:string xml:lang="en">CreateProjectProposal</ts:string>
            </ts:label>

             <ts:attribute name="proposalName">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Project</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="utf8"></ts:user-entry>
                </ts:origins>
            </ts:attribute>

             <ts:attribute name="amountBotls">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Amount of bottles</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"></ts:user-entry>
                </ts:origins>
            </ts:attribute>

            <ts:attribute name="geoPosLat">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Latitude</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"></ts:user-entry>
                </ts:origins>
            </ts:attribute>

            <ts:attribute name="geoPosLong">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Longitude</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"></ts:user-entry>
                </ts:origins>
            </ts:attribute>
             
            <ts:transaction>
                <ethereum:transaction as="utf8" contract="BotlDao" function="createProjectProposal">
                    <ts:data>
                        <ts:string ref="proposalName"></ts:string>
                        <ts:uint256 ref="amountBotls"></ts:uint256>
                        <ts:uint256 ref="geoPosLat"></ts:uint256>
                        <ts:uint256 ref="geoPosLong"></ts:uint256>
                    </ts:data>
                </ethereum:transaction>
             </ts:transaction>

            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
    }

    render() {

        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Create a new project proposal&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
          &lt;div id="inputBox"&gt;    
              &lt;bold&gt;&lt;h3&gt;Please enter the project name&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="proposalName" type="text" placeholder="project name..."&gt;&lt;/span&gt;

                  &lt;bold&gt;&lt;h3&gt;Please enter the amount of bottles&lt;/h3&gt;&lt;/bold&gt;
                  &lt;span&gt;&lt;input id="amountBotls" type="number" placeholder="bottles amount..."&gt;&lt;/span&gt;
                  &lt;bold&gt;&lt;h3&gt;Please enter your position latitude&lt;/h3&gt;&lt;/bold&gt;
                  &lt;span&gt;&lt;input id="geoPosLat" type="number" placeholder="latitude..."&gt;&lt;/span&gt;
                  &lt;bold&gt;&lt;h3&gt;Please enter your position longitude&lt;/h3&gt;&lt;/bold&gt;
                  &lt;span&gt;&lt;input id="geoPosLong" type="number" placeholder="longitude..."&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

        <!--<ts:card type="action">
            <ts:label>
                <ts:string xml:lang="en">CreateProjectProposal</ts:string>
            </ts:label>

            <ts:attribute name="projectName">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Project name</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="utf8"/>
                </ts:origins>
            </ts:attribute>

            <ts:attribute name="amountBotls">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Amount of bottles</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"/>
                </ts:origins>
            </ts:attribute>

            <ts:attribute name="geoPosLat">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Latitude</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"/>
                </ts:origins>
            </ts:attribute>

            <ts:attribute name="geoPosLong">
                <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Longitude</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"/>
                </ts:origins>
            </ts:attribute>
             
            <ts:transaction>
                <ethereum:transaction function="createProjectProposal" contract="BotlDao" as="uint">
                    <ts:data>
                        <ts:string ref="proposalName"/>
                        <ts:uint256 ref="amountBotls"/>
                        <ts:uint256 ref="geoPosLat"/>
                        <ts:uint256 ref="geoPosLong"/>
                    </ts:data>
                </ethereum:transaction>
             </ts:transaction>

            <ts:view
                xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">&style;</style>
                <script type="text/javascript">&createProjectProposal.en;</script>
            </ts:view>
        </ts:card>-->

        <ts:card name="vote" type="action">
            <ts:label>
                <ts:string xml:lang="en">Vote</ts:string>
            </ts:label>

            <ts:attribute name="proposalId">
                <ts:type>
                    <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
                </ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Proposal Id</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="uint"></ts:user-entry>
                </ts:origins>
            </ts:attribute>

             <ts:attribute name="vote">
            <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
            <ts:label>
                <ts:string xml:lang="en">Vote</ts:string>
            </ts:label>
            <ts:origins>
                <ts:user-entry as="uint"></ts:user-entry>
            </ts:origins>
            </ts:attribute>
             
            <ts:transaction>
            <ethereum:transaction as="uint" contract="BotlDao" function="vote">
                <ts:data>
                    <ts:uint256 ref="proposalId"></ts:uint256>
                    <ts:uint8 ref="vote"></ts:uint8>
                </ts:data>
             </ethereum:transaction>
             </ts:transaction>

            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
    }

    render() {

        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;         
            &lt;span&gt;&lt;bold&gt;&lt;h1&gt;Let's vote!&lt;/h1&gt;&lt;/bold&gt;&lt;/span&gt;
          &lt;/div&gt;
          &lt;div id="inputBox"&gt;
              &lt;bold&gt;&lt;h3&gt;Please enter the proposal id&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="proposalId" type="number" placeholder="proposal id..."&gt;&lt;/span&gt;
    
              &lt;bold&gt;&lt;h3&gt;Please provide your vote&lt;/h3&gt;&lt;/bold&gt;
              &lt;span&gt;&lt;input id="vote" type="number" placeholder="vote..."&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>

        <ts:card name="Approve" type="action">
            <ts:label>
                <ts:string xml:lang="en">Approve</ts:string>
            </ts:label>
            <ts:attribute name="approvalAddress">
                <ts:type>
                    <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
                </ts:type>
                <ts:label>
                    <ts:string xml:lang="en">Approval Address</ts:string>
                </ts:label>
                <ts:origins>
                    <ts:user-entry as="address"></ts:user-entry>
                </ts:origins>
            </ts:attribute>
            <ts:transaction>
                <ethereum:transaction as="uint" contract="BotlDao" function="approve">
                    <ts:data>
                        <ts:address ref="approvalAddress"></ts:address>
                        <ts:uint256>115792089237316195423570985008687907853269984665640564039457584007913129639935</ts:uint256>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">h3 { color: #111; font-family: 'Open Sans', sans-serif; font-size: 20px; font-weight: 300; line-height: 32px; }

#inputBox {
  text-align: center;
}

html,
body {
  height: 100%;
}
html {
  font-size: 14px;
}
body {
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
  min-width: 320px;
  background: #FFFFFF;
  font-family: 'Lato', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.4285em;
  color: rgba(0, 0, 0, 0.87);
  font-smoothing: antialiased;
}
.ui.container {
  display: block;
  max-width: 100% !important;
}
@media only screen and (max-width: 767px) {
  .ui.container {
    width: auto !important;
    margin-left: 1em !important;
    margin-right: 1em !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 991px) {
  .ui.container {
    width: 723px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1199px) {
  .ui.container {
    width: 933px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
@media only screen and (min-width: 1200px) {
  .ui.container {
    width: 1127px;
    margin-left: auto !important;
    margin-right: auto !important;
  }
}
.ui.segment {
  position: relative;
  background: #FFFFFF;
  -webkit-box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  box-shadow: 0px 1px 2px 0 rgba(34, 36, 38, 0.15);
  margin: 0.5rem 0em;
  padding: 0.5em 0.5em;
  border-radius: 0.28571429rem;
  border: 1px solid rgba(34, 36, 38, 0.15);
  text-align: center;
}
.ui.segment:first-child {
  margin-top: 0em;
}
.ui.segment:last-child {
  margin-bottom: 0em;
}
input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  font-size: 12px;
  display: -ms-inline-flexbox;
  display: inline-flex;
  color: rgba(0, 0, 0, 0.87);
  padding: 9.5px 14px;
  width: 300px;
  border-color: #D8D8D8;
}
input[type=text]:focus {
  border-color: #D8D8D8;
  background: #FAFAFA;
  color: rgba(0, 0, 0, 0.87);
  -webkit-box-shadow: none;
  box-shadow: none;
}
label {
  font-size: 12px;
  font-weight: 500;
  margin-top: 6px;
}</style>
                <script type="text/javascript">//
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
    }

    render() {
        let message = "Approve someone to use your tokens!";
        return`
        &lt;div class="ui container"&gt;
          &lt;div class="ui segment"&gt;
          
            &lt;span&gt;&lt;bold&gt;&lt;h3&gt;${message}&lt;/h3&gt;&lt;/bold&gt;&lt;/span&gt;
            &lt;input id="approvalAddress" type="text"&gt;
          &lt;/div&gt;
        &lt;/div&gt;
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens, tokenIdCard) =&gt; {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    document.getElementById(tokenIdCard).innerHTML = new Token(currentTokenInstance).render();
};
//
</script>
            </ts:view>
        </ts:card>
    </ts:cards>
    <ts:attribute name="decimals">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">decimals</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="uint" contract="BotlDao" function="decimals"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="minter">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">minter</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="address" contract="BotlDao" function="minter"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="name">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.26</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">name</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="utf8" contract="BotlDao" function="name"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="nextProposalId">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">nextProposalId</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="uint" contract="BotlDao" function="nextProposalId"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="symbol">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.26</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">symbol</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="utf8" contract="BotlDao" function="symbol"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="token">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">token</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="address" contract="BotlDao" function="token"></ethereum:call>
        </ts:origins>
    </ts:attribute>
    <ts:attribute name="totalShares">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">totalShares</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call as="uint" contract="BotlDao" function="totalShares"></ethereum:call>
        </ts:origins>
    </ts:attribute>
</ts:token>